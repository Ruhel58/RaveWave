{"version":3,"sources":["components/resources/logo.svg","components/resources/googleplay.svg","components/resources/youtube.svg","components/resources/spotify.svg","components/resources/deezer.svg","components/LoginBox/LoginBox.js","utils/local-storage.js","components/SignUpBox/SignUpBox.js","components/SongInformation/SongInformation.js","components/CategoryInformation/CategoryInformation.js","components/Result/Result.js","components/Playlist/IndividualPlaylist.js","components/Playlist/Playlist.js","components/SearchScreen/SearchScreen.js","components/NavBars/HomeBar.js","components/AdminOptions/AdminOptions.js","components/LogoutComponent/LogoutComponent.js","components/NavBars/LoggedInBar.js","components/Home/Home.js","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","LoginBox","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onClickLogin","fetchAndLogin","onTextBoxChangeUsername","event","setState","usernameLogin","target","value","onTextBoxChangePassword","passwordLogin","_handleKeyPress","e","key","state","loginMessage","success","_this2","triggerSetLoadingToFalse","undefined","triggerUpdateToken","_this$state","fetch","method","headers","Content-Type","body","JSON","stringify","userName","password","then","res","json","response","console","log","user_id","token","obj","error","localStorage","setItem","err","timeLog","getItem","setToStorage","userid","message","catch","_this$state2","react_default","a","createElement","Form","className","Fade","FormGroup","Input","type","placeholder","onChange","onKeyPress","Badge","href","color","onClick","size","pill","Alert","fade","BrowserRouter","Component","SignUpBox","fetchAndSignup","usernameSignup","passwordSignup","firstnameSignup","lastnameSignup","emailSignup","firstName","lastName","email","signUpMessage","onClickSignup","onTextBoxChangeFirstName","onTextBoxChangeLastName","onTextBoxChangeEmail","SongInformation","toggle","collapse","song","name","artist","Collapse","isOpen","Card","CardBody","albumName","year","youtubeUrl","rel","src","youtube","alt","spotifyUrl","spotify","googleMusicUrl","google","deezerUrl","deezer","CategoryInformation","fetchAndAdd","playlistName","fetchUserProfile","newPlaylistSuccess","newPlaylistMessage","_this$props","profile","_id","playlists","user","togglePopover","popoverOpen","toggleModal","prevState","modal","updateCheckState","checked","toAdd","concat","filter","val","getSongs","result","songs","map","index","InputGroupText","addon","components_SongInformation_SongInformation","getPlaylists","playlist","Button","addToPlaylist","createPlaylist","_ref","asyncToGenerator","regenerator_default","mark","_callee2","i","songid","wrap","_context2","prev","next","length","playlistid","_ref2","_callee","_context","addToPlaylistsuccess","stop","_x2","apply","arguments","forceUpdate","_x","handleCallback","newPlaylist","_this$props2","onPlaylistChange","userProfile","id","Popover","placement","PopoverHeader","PopoverBody","DropdownItem","divider","InputGroup","InputGroupAddon","addonType","Result","ListGroupItem","Modal","ModalHeader","ModalBody","components_CategoryInformation_CategoryInformation","FileSaver","require","IndividualPlaylist","toggleNested","nestedModal","closeAll","toggleAll","downloadPlaylist","playlistExport","playlistSongs","blob","Blob","saveAs","deletePlaylist","reloadData","playlistRemoveMessage","onClosed","ModalFooter","Playlist","loadUser","Playlist_IndividualPlaylist","_this$props3","ListGroup","SearchScreen","onClickSearch","fetchAndSearch","onSearchChange","query","displayResults","results","components_Result_Result","sessionToken","userId","processQuery","count","_this3","Switch","Route","path","exact","render","components_Playlist_Playlist","assign","Redirect","to","HomeBar","Navbar","light","expand","NavbarBrand","logo","width","Nav","navbar","NavItem","NavLink","AdminOptions","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","LogoutComponent","fetchAndLogout","logoutMessage","window","location","reload","history","outline","push","LoggedInBar","toggleNavbar","collapsed","componentDidMount","admin","status","NavbarToggler","firstname","components_LogoutComponent_LogoutComponent","components_AdminOptions_AdminOptions","Home","handleCallbackSetLoadingToTrue","loading","handleCallbackSetLoadingToFalse","handleCallbackUpdateToken","data","jsonFile","parse","getFromStorage","fetchAndVerifyToken","axios","get","NavBars_LoggedInBar","components_SearchScreen_SearchScreen","NavBars_HomeBar","components_SignUpBox_SignUpBox","triggerSetLoadingToTrue","components_LoginBox_LoginBox","component","App","components_Home_Home","Boolean","hostname","match","ReactDOM","components_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7941346e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.3307c695.svg\";","module.exports = __webpack_public_path__ + \"static/media/googleplay.9078aafd.svg\";","module.exports = __webpack_public_path__ + \"static/media/youtube.46bc6904.svg\";","module.exports = __webpack_public_path__ + \"static/media/spotify.e359ad39.svg\";","module.exports = __webpack_public_path__ + \"static/media/deezer.31d9f3aa.svg\";","import React, { Component } from 'react';\nimport { setToStorage } from '../../utils/local-storage'\nimport { Alert, Form, FormGroup, Input, Fade, Badge } from 'reactstrap'\nimport {BrowserRouter } from 'react-router-dom'\n\nclass LoginBox extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            usernameLogin : '',\n            passwordLogin : '',\n            loginMessage : '',\n            success : false\n        }\n    }\n\n    // Access the server and check if username and password is correct\n    // display the message which the server returns\n    fetchAndLogin(){\n        //declare the callback functions and verify that they have been sent as a prop\n        const { triggerSetLoadingToFalse } = this.props\n        if (triggerSetLoadingToFalse === undefined) {\n            return\n        }\n\n        const { triggerUpdateToken } = this.props\n        if ( triggerUpdateToken === undefined) {\n            return\n        }\n\n        const {\n            usernameLogin,\n            passwordLogin\n        } = this.state    \n\n        // submit the username and password to the server\n        fetch('/api/user/login', {\n            method : 'POST',\n            headers : {'Content-Type':'application/json'},\n            body : JSON.stringify({   \n                userName : usernameLogin,\n                password : passwordLogin\n            }),\n        })\n        .then(res => res.json())\n        .then(response => {\n            if (response.success) {\n                console.log(\"response \" + response.user_id)\n                triggerUpdateToken(response.token, response.user_id)\n                triggerSetLoadingToFalse()\n                setToStorage('RaveWave', {token : response.token, userid : response.user_id}, )\n                this.setState({\n                    usernameLogin: '',\n                    passwordLogin: '',\n                    loginMessage: response.message\n                })\n            } else {\n                this.setState({\n                    loginMessage : response.message,\n                    success : response.success \n                })\n            }\n        })\n        .catch(error => console.error('Error: ', error))  \n    }\n\n    onClickLogin =()=>{\n        this.fetchAndLogin()\n    }\n\n    // update the state with the user input\n\n    onTextBoxChangeUsername =(event)=>{\n        this.setState({\n            usernameLogin : event.target.value\n        })\n    }\n\n    // button on change method\n    onTextBoxChangePassword =(event)=>{\n        this.setState({\n            passwordLogin : event.target.value\n        })\n    }\n\n    _handleKeyPress = (e) => {\n        if (e.key === 'Enter') {\n          this.fetchAndLogin()\n        }\n      }\n\n    render(){\n        const {\n            usernameLogin,\n            passwordLogin,\n            loginMessage,\n            success\n        } = this.state\n        return(\n            <Form className=\"userForm\">\n                <Fade>\n                    <FormGroup>\n                        <h3 className=\"formTitle\">Login</h3>\n                    </FormGroup>\n                    <FormGroup>\n                        <Input \n                            type=\"text\" \n                            placeholder=\"Username\" \n                            value={usernameLogin}\n                            onChange={this.onTextBoxChangeUsername}\n                            onKeyPress={this._handleKeyPress}\n                        /> \n                    </FormGroup>\n                    <FormGroup>\n                        <Input \n                            type=\"password\" \n                            placeholder=\"Password\" \n                            value={passwordLogin} \n                            onChange={this.onTextBoxChangePassword}\n                            onKeyPress={this._handleKeyPress}\n                        /> \n                    </FormGroup>       \n                    <FormGroup>\n                        <h1><Badge href=\"#\" color=\"purple\" onClick={this.onClickLogin} size='xl' className=\"defaultButton\" pill><div className=\"text\">Login</div></Badge></h1>\n                    </FormGroup>\n                    <FormGroup>\n                        {console.log(loginMessage)}\n                        {\n                            (loginMessage) ? (<Alert color={(success) ? (\"success\") : (\"danger\")} fade=\"true\" size=\"xs\">{loginMessage}</Alert>) : (null)  \n                        }\n                    </FormGroup>\n                    \n                </Fade>\n                <BrowserRouter>\n                  \n                </BrowserRouter>\n            </Form>\n        )\n    }\n}\n\n\nexport default LoginBox;\n","export function getFromStorage(key){\n    if(!key) {\n        return null\n    }\n    try {\n        const value = localStorage.getItem(key)\n        if (value) {\n             return JSON.parse(value)\n        }\n        return null\n    } catch (err){\n        return null\n    }\n}\n\nexport function setToStorage(key, obj){\n    console.log(\"adding...\")\n    if (!key){\n        console.error('Key is missing')\n    }\n    try {\n        localStorage.setItem(key, JSON.stringify(obj))\n    } catch (err){ \n        console.error('Error: ' + err)\n    }\n    console.timeLog(localStorage.getItem(key))\n}","import React, { Component } from 'react'\nimport { Alert, Form, FormGroup, Input, Fade, Badge } from 'reactstrap'\n\nclass SignUpBox extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            usernameSignup : '',\n            passwordSignup : '',\n            firstnameSignup : '',\n            lastnameSignup : '',\n            emailSignup : '',\n            signUpMessage : '',\n            success : false\n        }\n    }\n    /**\n     * Fetch the URL and send JSON data to the server\n     * Server will respond with a message\n     * Get the response and set the response to the state\n     * callback is trigger and parent componenet's state is changed\n     */\n    fetchAndSignup =()=>{\n        const { triggerSetLoadingToFalse } = this.props\n        if (triggerSetLoadingToFalse === undefined) {\n            console.error(\"Pass in the callback function as a prop\")\n            return\n        }\n        const {\n            usernameSignup,\n            passwordSignup,\n            firstnameSignup,\n            lastnameSignup,\n            emailSignup\n        } = this.state    \n        \n        fetch('/api/user/signup', {\n            method : 'POST',\n            headers : {'Content-Type':'application/json'},\n            body : JSON.stringify({   \n                userName : usernameSignup ,\n                firstName : firstnameSignup,\n                lastName : lastnameSignup ,\n                email : emailSignup,\n                password : passwordSignup,\n            }),\n        })\n        .then(res => res.json())\n        .then(response => {\n            if (response.success) {\n                triggerSetLoadingToFalse()\n                this.setState({\n                    signUpMessage : response.message, \n                    success : response.success,\n                    firstnameSignup : '',\n                    lastnameSignup : '',\n                    usernameSignup : '',\n                    passwordSignup : '',\n                    emailSignup : '',\n                })\n            } else {\n                this.setState({\n                    signUpMessage : response.message, \n                })\n            }\n        })\n        .catch(error => console.error('Error: ', error))  \n    }\n    \n    // button on change method\n    onClickSignup =()=>{\n        this.fetchAndSignup()\n    }\n\n    // update the state with the user input\n    onTextBoxChangeUsername =(event)=>{\n        this.setState({\n            usernameSignup : event.target.value\n        })\n    }\n\n    onTextBoxChangePassword =(event)=>{\n        this.setState({\n            passwordSignup : event.target.value\n        })\n    }\n\n    onTextBoxChangeFirstName =(event)=>{\n        this.setState({\n            firstnameSignup: event.target.value\n        })\n    }\n    onTextBoxChangeLastName =(event)=>{\n        this.setState({\n            lastnameSignup : event.target.value\n        })\n    }\n    onTextBoxChangeEmail =(event)=>{\n        this.setState({\n            emailSignup: event.target.value\n        })\n    }\n\n    // output the compoenent\n    render(){\n        const {\n            usernameSignup, \n            passwordSignup, \n            firstnameSignup, \n            lastnameSignup, \n            emailSignup,\n            signUpMessage,\n            success\n        } = this.state\n        return(\n            <Form className=\"userForm\">\n                <Fade>\n                    <FormGroup>\n                        <h3 className=\"formTitle\">Sign up</h3>\n                    </FormGroup>\n                    <FormGroup>\n                            <Input \n                                type=\"text\" \n                                placeholder=\"First Name\" \n                                value={firstnameSignup}\n                                onChange={this.onTextBoxChangeFirstName}\n                            /> \n                    </FormGroup>\n                    <FormGroup>\n                            <Input \n                                type=\"text\" \n                                placeholder=\"Last Name\" \n                                value={lastnameSignup}\n                                onChange={this.onTextBoxChangeLastName}\n                            />\n                    </FormGroup>\n                    <FormGroup>\n                            <Input \n                                type=\"email\" \n                                placeholder=\"Email\" \n                                value={emailSignup}\n                                onChange={this.onTextBoxChangeEmail}\n                            /> \n                    </FormGroup>\n                    <FormGroup>\n                            <Input \n                                type=\"text\" \n                                placeholder=\"Username\" \n                                value={usernameSignup}\n                                onChange={this.onTextBoxChangeUsername}\n                            /> \n                    </FormGroup>\n                    <FormGroup>\n                            <Input \n                                type=\"password\" \n                                placeholder=\"Password\" \n                                value={passwordSignup}\n                                onChange={this.onTextBoxChangePassword}\n                            /> \n                    </FormGroup>\n                    <FormGroup>\n                        <h1><Badge href=\"#\" color=\"purple\" onClick={this.onClickSignup} size='xl' className=\"defaultButton\" pill><div className=\"text\">Signup</div></Badge></h1>\n                    </FormGroup>\n       \n                    <FormGroup>\n                        {\n                            (signUpMessage) ? (<Alert color={(success) ? (\"success\") : (\"danger\")} fade=\"true\" size=\"xs\">{signUpMessage}</Alert>) : (null)\n                        }\n                    </FormGroup>\n                </Fade>\n            </Form>\n        )\n    }\n}\n\n\nexport default SignUpBox;\n","import React, { Component } from 'react'\nimport { Button, Collapse, Card, CardBody} from 'reactstrap'\nimport google from '../resources/googleplay.svg'\nimport youtube from '../resources/youtube.svg'\nimport spotify from '../resources/spotify.svg'\nimport deezer from '../resources/deezer.svg'\n\nclass SongInformation extends Component {\n    constructor(props){\n        super(props)\n\n        this.state={\n            collapse : false\n        }\n    }\n    toggle =()=> {\n        this.setState(state => ({ collapse: !state.collapse }));\n      }\n\n    render(){\n        const { song } = this.props\n        return(\n            <div>\n                <div onClick={this.toggle} className=\"songName\"><strong>{song.name}</strong> by {song.artist}</div>\n                <Collapse isOpen={this.state.collapse}>\n                    <Card>\n                        <CardBody>\n                            <strong>Name:</strong> {song.name}\n                            <br />\n                            <strong>Artist:</strong> {song.artist}\n                            <br />         \n                            <strong>Album:</strong> {song.albumName}\n                            <br />\n                            <strong>Year:</strong> {song.year}\n                            <br /> <strong>Open via:</strong> \n                            <br />\n                                {(song.youtubeUrl)? \n                                    (<a href={song.youtubeUrl} target=\"_blank\" rel=\"noopener noreferrer\" > \n                                        <img src={youtube} alt=\"youtube logo\" className=\"icons\"/>\n                                    </a>) : \n                                (null)}\n\n                                {(song.spotifyUrl)? \n                                    (<a href={song.spotifyUrl} target=\"_blank\" rel=\"noopener noreferrer\" >\n                                        <img src={spotify} alt=\"spotify logo\" className=\"icons\"/>\n                                    </a>) : \n                                (null)}\n\n                                {(song.googleMusicUrl)? \n                                    (<a href={song.googleMusicUrl} target=\"_blank\" rel=\"noopener noreferrer\" >\n                                        <img src={google} alt=\"google music logo\" className=\"icons\"/>\n                                    </a>) :\n                                (null)}\n\n                                {(song.deezerUrl)? \n                                    (<a href={song.deezerUrl} target=\"_blank\" rel=\"noopener noreferrer\" >\n                                        <img src={deezer} alt=\"deezer logo\" className=\"icons\"/>\n                                    </a>) : \n                                (null)}\n\n                        </CardBody>\n                    </Card>\n                </Collapse>\n            </div>\n        )\n    }\n}\n\nexport default SongInformation","import React, { Component } from \"react\";\nimport { \n    Button, \n    Popover, \n    PopoverHeader, \n    PopoverBody, \n    Fade, \n    DropdownItem, \n    Alert, \n    InputGroupAddon,  \n    Input, \n    InputGroup, \n    InputGroupText\n} \nfrom 'reactstrap'\nimport SongInformation from '../SongInformation/SongInformation'\n\nclass CategoryInformation extends Component {\n    constructor(props){\n        super(props)\n        this.state={\n            addToPlaylistsuccess : false,\n            popoverOpen: false,\n            modal: false,\n            message :'',\n            newPlaylist : '',\n            newPlaylistMessage : '',\n            newPlaylistSuccess : false,\n            toAdd : [],\n            playlists : this.props.profile.playlists,\n            userProfile : null,\n            \n        }      \n        console.log(this.state.playlists)\n    }\n\n    fetchAndAdd =(name, token, userid)=>{  \n     \n        fetch('/api/user/createplaylist', {\n            method : 'POST',\n            headers : {'Content-Type':'application/json'},\n            body : JSON.stringify({   \n                userid : userid,\n                token : token,\n                playlistName : name\n            }),\n        })\n        .then(res => res.json())\n        .then(response => {\n            this.fetchUserProfile()\n            this.setState({\n                newPlaylistSuccess : response.success,\n                newPlaylistMessage : response.message\n            })\n        })\n        .catch(error => console.error('Error: ', error))  \n    }\n\n    fetchUserProfile=()=> {\n        const { token, profile } = this.props;\n        fetch(\n          \"/api/user/retrieveuser\" + \n          \"?token=\" + token + \n          \"&userid=\" + profile._id,\n          {\n            method: \"GET\"\n          }\n          )\n          .then(res => res.json())\n          .then(response => {\n           \n            if (response.success) { \n                console.log(\"yes\")         \n                this.setState({\n                    playlists : response.user.playlists\n                })\n            } else {\n                console.log(\"ERROR fetching data \");\n            }\n          })\n    }\n\n    togglePopover =()=> {\n        this.setState({\n          popoverOpen: !this.state.popoverOpen\n        });\n    }\n\n    toggleModal =()=> {\n        this.setState(prevState => ({\n            modal: !prevState.modal\n          }));\n    }\n\n    updateCheckState =(e)=>{\n        if (e.target.checked){      \n            this.setState({\n                toAdd: this.state.toAdd.concat([e.target.value])\n                })\n        } else {\n            this.setState({\n                toAdd : this.state.toAdd.filter(function(val) {return val!==e.target.value})\n                })\n        }\n    }\n\n    // display all the songs in the category\n    getSongs =()=>{\n        const {result} = this.props\n        const songs = result.songs\n\n        return (\n            songs.map((index) =>{\n                return (\n                    <div className=\"listOfSongs\">\n                        <InputGroupText>\n                            <Input addon type=\"checkbox\" value={index._id} onClick={this.updateCheckState}/>\n                            <SongInformation \n                            song = {index}\n                        />\n                        </InputGroupText>\n                        \n                    </div>\n                )\n            })\n        )\n    }\n\n    // display all the user playlist\n    getPlaylists =()=>{  \n        return (\n        this.state.playlists.map((playlist) =>{\n            return (\n                <Fade>\n                    <Button onClick={() => this.addToPlaylist(playlist)} color=\"link\">{playlist.playlistName}</Button>\n                </Fade>\n                )\n            })\n        )\n    }\n\n    _handleKeyPress = (e) => {\n        if (e.key === 'Enter') {\n          this.createPlaylist()\n        }\n      }\n\n    // make multiple fetch requests in order to add all the selected song\n    // async and await used to ensure one request is completed before moving to the next\n    addToPlaylist = async (playlist)=>{\n        const size = this.state.toAdd.length\n        for (let i =0; i < size; i++){\n            let songid = this.state.toAdd[i]\n            const { profile } = this.props\n           \n            await fetch('/api/user/addsongtoplaylist', {\n                method : 'POST',\n                headers : {'Content-Type':'application/json'},\n                body : JSON.stringify({   \n                    userid: profile._id ,\n                    token : this.props.token,\n                    playlistid : playlist._id, \n                    songid : songid\n                }),\n            })\n            .then(res => res.json())\n            .then(async response => {\n                if (response.success) {\n                    this.setState({\n                        message : response.message, \n                        addToPlaylistsuccess : response.success\n                    })\n                    \n                } else {\n                    this.setState({ \n                        message : response.message, \n                        addToPlaylistsuccess : response.success\n                    })\n                }\n            })\n            .catch(error => console.error('Error: ', error)) \n            this.togglePopover()  \n            this.forceUpdate()\n        }\n    }\n\n    handleCallback =(message, success)=> {\n        this.setState({\n            newPlaylistMessage : message,\n            newPlaylistSuccess : success\n        })\n    }\n\n    createPlaylist=()=>{\n        const {newPlaylist} = this.state\n        if(newPlaylist === '') {\n            this.setState({\n                newPlaylistSuccess : false,\n                newPlaylistMessage : 'empty'\n            })\n            return\n        }\n        const {token, profile} = this.props\n        this.fetchAndAdd(newPlaylist, token, profile._id)\n        this.getPlaylists()\n        this.forceUpdate()\n    }\n\n    onPlaylistChange = (event) => {\n        this.setState({\n            newPlaylist: event.target.value\n        });\n      };\n\n    render(){\n        return(\n            <Fade>\n                {this.getSongs()}\n                < br />\n                <Button color=\"purple\" id=\"Popover1\">Add to playlist</Button>\n                {console.log(this.state.addToPlaylistsuccess)}\n                {\n                    (this.state.addToPlaylistsuccess) ? (<Alert>Song succesfully added to playlist</Alert>) : (null)\n                }\n                <Popover placement=\"left\" isOpen={this.state.popoverOpen} target=\"Popover1\" toggle={this.togglePopover}>\n                <PopoverHeader>Playlists</PopoverHeader>\n                <PopoverBody className =\"popoverBody\" >{this.getPlaylists()}\n                <DropdownItem divider />\n                <InputGroup>\n                    <h6>Create Playlist</h6>\n                </InputGroup>\n                <InputGroup size=\"md\" className=\"search\">\n                    <Input \n                        type=\"text\" \n                        placeholder=\"Playlist Name\" \n                        onChange={this.onPlaylistChange}\n                        value={this.state.newPlaylist}\n                        onKeyPress={this._handleKeyPress}\n                    />\n                    <InputGroupAddon addonType=\"append\">\n              <Button \n                color=\"purple\"\n                onClick={this.createPlaylist}>\n                Add\n              </Button>\n            </InputGroupAddon>\n                    {\n                        (this.state.newPlaylistMessage === 'empty') ? (<div><Alert color=\"danger \">Enter a name for the playlist</Alert></div>) : (null)\n                    }\n                    {\n                        (this.state.newPlaylistSuccess) ? (<div><Alert>{this.state.newPlaylistMessage}</Alert></div>) : (null)\n                    }\n                </InputGroup>\n                </PopoverBody>\n                </Popover>\n            </Fade>\n\n        )\n    }\n}\n\nexport default CategoryInformation","import React, { Component } from \"react\";\nimport CategoryInformation from '../CategoryInformation/CategoryInformation'\nimport {\n  ModalBody,\n  Badge,\n  ListGroupItem,\n  Button,\n  Modal,\n  ModalHeader\n  \n} from \"reactstrap\";\n\nclass Result extends Component {\n   \n    constructor(props){\n        super(props)\n        this.state = {\n            modal: false\n        }\n    }\n\n    toggle =()=> {\n        this.setState(prevState => ({\n          modal: !prevState.modal\n        }));\n      }\n\n    render(){\n        const {\n            result,\n            profile,\n            token\n        } = this.props\n        return (\n        <div>\n            <ListGroupItem >\n                <h3><Button color=\"link\" onClick={this.toggle}>{result.name + \"   \"}\n              <Badge color=\"purple\" pill>{result.songs.length}</Badge>\n              </Button></h3>\n              <Modal isOpen={this.state.modal} toggle={this.toggle}> \n              <ModalHeader toggle={this.toggle}>{result.name}</ModalHeader>\n              <ModalBody>\n                  <CategoryInformation \n                    profile={profile}\n                    result={result}\n                    token={token}\n                  />\n              </ModalBody>\n              </Modal>\n              </ListGroupItem>\n              </div>\n        )\n    }\n}\n\nexport default Result;","import React, { Component } from \"react\";\nimport {\n    Button, \n    Fade, \n    ListGroupItem, \n    Modal, \n    ModalHeader, \n    ModalBody,\n    ModalFooter} from 'reactstrap'\nimport SongInformation from '../SongInformation/SongInformation'\nconst FileSaver = require('file-saver');\n\nclass IndividualPlaylist extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            modal: false,\n            nestedModal: false,\n            closeAll: false,\n            playlistRemoveMessage : '',\n        }\n    }\n\n    toggle =()=> {\n        this.setState(prevState => ({\n          modal: !prevState.modal\n        }));\n      }\n    \n      toggleNested =()=> {\n        this.setState({\n          nestedModal: !this.state.nestedModal,\n          closeAll: false\n        });\n      }\n    \n      toggleAll =()=>{\n        this.setState({\n          nestedModal: !this.state.nestedModal,\n          closeAll: true\n        });\n      }\n\n      // extracts the relevant data from the playlist and downloads it to client\n      downloadPlaylist =()=>{\n        const {playlist} = this.props\n    \n        let playlistExport = playlist.playlistName + \"\\n------------------------------------------------------------------\\n\\n\"\n      \n        for (let i = 0; i < playlist.playlistSongs.length; i++){\n            playlistExport += \"Song \" + (i+1) + \":\\n\"\n            playlistExport += \"\\t Name: \"+playlist.playlistSongs[i].name \n                    + \"\\n\\t Artist: \" + playlist.playlistSongs[i].artist \n                    +\"\\n\\t Year: \" + playlist.playlistSongs[i].year + \"\\n\\n\" \n       \n        }\n        \n        var blob = new Blob([playlistExport], {type: \"text/plain;charset=utf-8\"});\n        FileSaver.saveAs(blob, playlist.playlistName+\".txt\", {type: \"text/plain;charset=utf-8\"});\n      }\n\n    getSongs =(playlist)=>{\n        const songs = playlist.playlistSongs\n        return (\n            songs.map((index) =>{\n                return (\n                    <Fade>\n                        <SongInformation \n                            song = {index}\n                        />\n                    </Fade>\n                )\n            })\n        )\n    }\n\n    deletePlaylist =()=>{\n        const { token, userid, playlist, reloadData } = this.props\n        if (reloadData === undefined) {\n            console.error(\"Pass in the callback function as a prop\")\n            return\n        }\n        fetch('/api/user/removeplaylist', {\n            method : 'POST',\n            headers : {'Content-Type':'application/json'},\n            body : JSON.stringify({   \n                userid : userid,\n                token : token,\n                playlistid : playlist._id\n            }),\n        }).then(res => res.json())\n        .then(response => {\n            if(response.success) {\n                this.setState({\n                    playlistRemoveMessage : response.message\n                })\n            }\n        })\n        reloadData()\n        this.toggleAll() \n    }\n\n    render(){\n        const {playlist} = this.props\n        return(\n            <ListGroupItem className=\"playlistScreen\">\n                <Fade>\n                    <span onClick={this.toggle}><span className=\"playlistName\">{playlist.playlistName}</span></span>\n                    <Modal isOpen={this.state.modal} toggle={this.toggle} className={this.props.className}>\n                        <ModalHeader toggle={this.toggle}>{playlist.playlistName}</ModalHeader> \n                        <ModalBody>\n                            {this.getSongs(playlist)}\n                            <br />\n                            <Button className=\"playlistOptions\" color=\"purple\" onClick={this.downloadPlaylist}>Download Playlist</Button>\n                            <Button className=\"playlistOptions\" color=\"danger\" onClick={this.toggleNested}>Delete Playlist</Button>\n                            <Modal isOpen={this.state.nestedModal} toggle={this.toggleNested} onClosed={this.state.closeAll ? this.toggle : undefined}>\n                                <ModalBody>Are you sure you want to delete that playlist?</ModalBody>\n                                <ModalFooter>\n                                    <Button color=\"purple\" onClick={this.toggleNested}>No</Button>{' '}\n                                    <Button color=\"danger\" onClick={this.deletePlaylist}>Yes</Button>\n                                </ModalFooter>\n                            </Modal>\n                        </ModalBody>\n                    </Modal>\n                </Fade>\n            </ListGroupItem>\n        )\n    }\n}\n\nexport default IndividualPlaylist","import React, { Component } from \"react\";\nimport {\n    Button, \n    Fade, \n    ListGroup, \n    Alert, \n    Modal, \n    ModalHeader, \n    ModalBody,\n    Input\n} from 'reactstrap'\n\nimport IndividualPlaylist from '../Playlist/IndividualPlaylist'\nclass Playlist extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            modal: false,\n            profile : null,\n            newPlaylist : '',\n            newPlaylistSuccess : false\n        }\n    }\n\n    componentDidMount(){\n        this.loadUser()\n    }\n\n    toggle =()=> {\n        this.setState(prevState => ({\n          modal: !prevState.modal\n        }));\n      }\n\n    loadUser =()=> {\n        const { token, userid } = this.props\n        fetch(\n          \"/api/user/retrieveuser\" + \n          \"?token=\" + \n          token + \n          \"&userid=\" + \n          userid,\n          {\n            method: \"GET\"\n          }\n          )\n          .then(res => res.json())\n          .then(response => {\n           \n            if (response.success) {      \n              this.setState({\n                profile : response.user\n              })\n            } else {\n              console.log(\"ERROR fetching data \");\n            }\n          })\n    }\n\n    getPlaylists=()=>{\n        this.loadUser()\n        const { token, userid } = this.props\n        const {profile} = this.state\n        if (profile){\n            if(profile.playlists.length <1) {\n                return (\n                    <div>\n                        <br />\n                        <h2 className=\"subtitle\">You seem to have no playlists</h2>\n                    </div>\n                )\n            }\n            return (\n                profile.playlists.map((playlist) =>{\n                    return (\n                        <div>\n                            <IndividualPlaylist\n                                playlist={playlist}\n                                token={token}\n                                userid = {userid}\n                                reloadData = {this.loadUser}\n                            />\n                            \n                        </div>\n                    )\n                })\n                \n            )\n        } \n    }\n\n    _handleKeyPress = (e) => {\n        if (e.key === 'Enter') {\n          this.createPlaylist()\n        }\n      }\n\n    onPlaylistChange = event => {\n        this.setState({\n            newPlaylist: event.target.value\n        });\n      };\n\n    createPlaylist=()=>{  \n        const {newPlaylist} = this.state  \n        if(newPlaylist === '') {\n            this.setState({\n                newPlaylistSuccess : false,\n                newPlaylistMessage : 'empty'\n            })\n            return\n        }\n            this.fetchAndAdd()\n            this.getPlaylists() \n            this.toggle() \n    }\n\n    fetchAndAdd = async ()=>{  \n        const { newPlaylist } = this.state\n        const { token, userid } = this.props\n        await fetch('/api/user/createplaylist', {\n            method : 'POST',\n            headers : {'Content-Type':'application/json'},\n            body : JSON.stringify({   \n                userid : userid,\n                token : token,\n                playlistName : newPlaylist\n            }),\n        })\n        .then(res => res.json())\n        .then(response => {\n            this.setState({\n                newPlaylistSuccess : response.success,\n                newPlaylistMessage : response.message\n            })\n        })\n        .catch(error => console.error('Error: ', error))  \n    }\n\n    render(){\n        return(\n            <div className=\"playlists\">\n            <Fade>\n                <h1 className=\"title\">Playlists</h1>\n                <div>\n                <ListGroup>{this.getPlaylists()}</ListGroup>\n                <Button \n                    color=\"purple\"\n                    onClick={this.toggle}\n                    className=\"lowerButtons\"\n                >\n                Create Playlist\n                </Button>\n                </div>\n                <Modal isOpen={this.state.modal} toggle={this.toggle} className={this.props.className}> \n                <ModalHeader toggle={this.toggle}>Create a new playlist</ModalHeader>\n                <ModalBody>\n                <Input \n                    type=\"text\" \n                    placeholder=\"Playlist Name\" \n                    onChange={this.onPlaylistChange}\n                    value={this.state.newPlaylist}\n                    onKeyPress={this._handleKeyPress}\n                />\n                <Button \n                    className=\"lowerButtons\"\n                    color=\"purple\"\n                    onClick={this.createPlaylist}>\n                    Add Playlist\n                </Button>\n                {\n                    (this.state.newPlaylistMessage === 'empty') ? (<div><Alert color=\"danger \">Enter a name for the playlist</Alert></div>) : (null)\n                }\n                </ModalBody>\n                </Modal>\n                \n                </Fade>\n            </div>\n        )\n    }\n}\n   \n    export default Playlist","import React, { Component } from \"react\";\nimport Result from '../Result/Result'\nimport { BrowserRouter, Route, Switch, Redirect } from 'react-router-dom'\nimport Playlist from '../Playlist/Playlist'\n\nimport {\n  InputGroup,\n  InputGroupAddon,\n  Input,\n  Button,\n  ListGroup,\n  Alert\n} from \"reactstrap\";\n\nclass SearchScreen extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userProfile: null,\n      query: '',\n      message: '',\n      count : 0,\n      results : null,\n      success : false\n      \n    };\n  }\n\n  fetchAndSearch(){\n    const { sessionToken, userId } = this.props;\n    fetch(\n      \"/api/user/search\" + \n      \"?token=\" + sessionToken + \n      \"&userid=\" + userId +\n      \"&search=\" + this.state.query,\n      {\n        method: \"GET\"\n      }\n    )\n      .then(res => res.json())\n      .then(response => {\n        if (response.success) {\n          this.setState({\n            message: response.message,\n            count : response.count,\n            results : response.results,\n            success : response.success\n          });\n        } else{\n          this.setState({ \n            success : response.success,\n            message : response.success\n          })\n        }\n      })\n      \n    }\n       \n  componentDidMount() {\n    this.fetchUserProfile();\n  }\n\n  onClickSearch =()=>{\n    this.fetchAndSearch()\n  }\n\n  // update the state as the user types in the search box\n  onSearchChange = event => {\n    this.setState({\n      query: event.target.value\n    });\n  };\n\n  _handleKeyPress = (e) => {\n    if (e.key === 'Enter') {\n      this.fetchAndSearch()\n    }\n  }\n\n\n  displayResults =()=>{\n    return (\n      <div>\n      <br />{\n      this.state.results.map((result) =>{\n        return (\n          <div>\n            <Result \n              token={this.props.sessionToken}\n              result={result} \n              profile={this.state.userProfile}\n            />\n            </div>\n        )\n      })\n    }</div>\n    )    \n  }\n\n  fetchUserProfile=()=> {\n    const { sessionToken, userId } = this.props;\n    fetch(\n      \"/api/user/retrieveuser\" + \n      \"?token=\" + \n      sessionToken + \n      \"&userid=\" + \n      userId,\n      {\n        method: \"GET\"\n      }\n      )\n      .then(res => res.json())\n      .then(response => {\n       \n        if (response.success) { \n          console.log(\"yes\")         \n          this.setState({\n            userProfile: response.user\n          })\n        } else {\n          console.log(\"ERROR fetching data \");\n        }\n      })\n  }\n\n  processQuery =()=>{\n    const {results, success, message} = this.state\n    if (success){\n      if (results.length <1) {\n        return (<Alert color=\"danger\">{message}</Alert>)\n      } else {\n        return (\n          <div>\n            <br />\n            <div className=\"searchResltsTitle\">{message}</div>\n            <ListGroup>{this.displayResults()}</ListGroup>\n        </div>\n        )\n      }\n    }\n  }\n\n  render() {\n    const { query } = this.state\n\n    return (\n      <div className=\"searchScreen\">\n      <BrowserRouter>\n        <Switch>\n          <Route \n            path='/playlist' exact \n            render={(props) => \n                <div>\n                    <Playlist {...props} \n                      userid={this.props.userId}\n                      token={this.props.sessionToken}\n                      />\n                </div>\n                }\n          />\n          <Route \n            path='/home' exact \n            render={(props) => \n              <div>\n                <InputGroup >\n                  <h4 className=\"title\">Search Mood</h4> \n                </InputGroup>\n                <InputGroup size=\"md\" className=\"searchScreenField\">\n                  <Input  \n                    type=\"text\" \n                    placeholder=\"Enter mood/genre\" \n                    onChange={this.onSearchChange}\n                    value={query}\n                    onKeyPress={this._handleKeyPress}\n                  />\n                  <InputGroupAddon addonType=\"append\">\n                    <Button \n                      color=\"purple\"\n                      onClick={this.onClickSearch}>\n                      Search\n                    </Button>\n                  </InputGroupAddon>\n                </InputGroup>\n                <div>\n                  {this.processQuery()}\n                </div>\n              </div>\n          }/>\n          <Redirect to=\"/home\" />\n        </Switch>\n      </BrowserRouter>\n      </div>\n    )\n  }\n}\n\nexport default SearchScreen;\n","import React, { Component } from 'react';\nimport { NavLink } from 'react-router-dom'\nimport { Navbar, NavbarBrand, NavItem, Nav, Fade} from 'reactstrap'\n\nimport logo from '../resources/logo.svg'\n\nclass HomeBar extends Component {\n  \n    render(){\n        return(\n            <div>\n                <Fade>\n                    <Navbar color=\"purple\" light expand=\"xs\">\n                        <NavbarBrand href=\"/\" >\n                            <img src={logo} alt=\"logo\" width=\"7%\" className=\"brandLogo\"/>\n                            <span className=\"brandText\">RaveWave</span>\n                        </NavbarBrand>\n                        <Nav className=\"ml-auto\" navbar>\n                            <NavItem>\n                                <NavLink className=\"hyp\" to=\"/signup\">Signup</NavLink>\n                            </NavItem>\n                            <NavItem>\n                                <NavLink className=\"hyp\"  to=\"/login\">Login</NavLink>\n                            </NavItem>\n                        </Nav>\n                    </Navbar>\n                </Fade>\n            </div>\n        )\n    }\n}\n\nexport default HomeBar;","import React, { Component } from 'react';\nimport {UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap'\n\nclass AdminOptions extends Component {\n    render(){\n        return(\n            <UncontrolledDropdown nav inNavbar color=\"darkPurple\">\n            <DropdownToggle nav caret>\n              Admin\n            </DropdownToggle>\n            <DropdownMenu right>\n              <DropdownItem>\n                Add Song\n              </DropdownItem>\n              <DropdownItem>\n                Remove Song\n              </DropdownItem>\n              <DropdownItem>\n                Remove User\n              </DropdownItem>\n              <DropdownItem>\n                Create Category\n              </DropdownItem>\n              <DropdownItem>\n                Remove\n              </DropdownItem>\n            </DropdownMenu>\n          </UncontrolledDropdown>\n        )\n    }\n\n}\n\nexport default AdminOptions;\n","import React, { Component } from 'react';\nimport './LogoutComponent.css';\nimport  { Route } from 'react-router-dom'\nimport { Button } from 'reactstrap';\n\nclass LogoutComponent extends Component {\n\n    /**\n     * Component is just one button. \n     * Clicking the button will do a an api to the server and log the current user out\n     * LoginSession is modified\n     */\n\n    constructor(props){\n        super(props)\n        this.state = {\n            logoutMessage : ''\n        }\n    }\n\n    fetchAndLogout =(token)=>{\n    \n        fetch('/api/user/logout?token=' + token)\n        .then(res => res.json())\n        .then(response => {\n            // possible error handling in the future\n            if (response.success) {\n                this.setState({\n                    logoutMessage : response.message\n                })\n                //refresh the page\n                window.location.reload();\n            } else {\n                this.setState({\n                    logoutMessage : response.message\n                })\n            }\n        })\n    }\n    \n    render(){\n        return(\n            <div>\n                <Route \n                    render={({ history }) => (\n                        <Button outline color=\"darkPurple\" className=\"navoptions\"\n                            type='button'\n                            onClick={() => {\n                                history.push('/')\n                                this.fetchAndLogout(this.props.sessionToken)\n                            }}\n                        >\n                        Logout\n                        </Button>\n                    )} \n                />\n            </div>\n        )\n    }\n\n}\n\nexport default LogoutComponent;\n\n","import React, { Component } from 'react';\nimport AdminOptions from '../AdminOptions/AdminOptions'\nimport logo from '../resources/logo.svg'\nimport LogoutComponent from '../LogoutComponent/LogoutComponent'\nimport { \n  Button, \n  Navbar, \n  NavbarBrand, \n  NavItem, \n  Nav,\n  NavbarToggler, \n  Collapse\n} \nfrom 'reactstrap'\n\nclass LoggedInBar extends Component {    \n    constructor(props){\n        \n        super(props)\n        this.state={\n            isOpen: false,\n            user : null,\n            collapsed: true\n        }\n    }\n\n  toggle =()=> {\n      this.setState({\n          isOpen: !this.state.isOpen\n      })\n    }\n\n    // navigation bar collapses when the menue icon is pressed\n    toggleNavbar=()=> {\n      this.setState({\n        collapsed: !this.state.collapsed\n      })\n    }\n\n    componentDidMount =()=>{\n        this.fetchUserProfile()\n    }\n\n    fetchUserProfile = async()=> {\n        const { sessionToken, userId } = this.props;\n        await fetch(\n          \"/api/user/retrieveuser\" + \n          \"?token=\" + \n          sessionToken + \n          \"&userid=\" + \n          userId,\n          {\n            method: \"GET\"\n          }\n        )\n          .then(res => res.json())\n          .then(response => {\n            if (response.success) {\n              this.setState({\n                user: response.user\n              })\n            } else {\n              console.log(\"ERROR fetching data \");\n            }\n          })\n    }\n\n    render(){\n        let admin = false\n        if(this.state.user) {\n            const { status } = this.state.user\n            if (status === \"admin\") {\n                admin = true\n            }\n        }\n        let { user } = this.state\n\n        return(\n            <div>\n                <Navbar color=\"purple\" light >\n                    <NavbarBrand href=\"/\" className=\"mr-2\">\n                        <img src={logo} alt=\"logo\" width=\"7%\" className=\"brandLogo\"/>\n                        <span className=\"loggedInText\">RaveWave</span>\n                    </NavbarBrand>\n                    <NavbarToggler onClick={this.toggleNavbar} className=\"mr-1\"/>\n                      <Collapse isOpen={!this.state.collapsed} navbar>\n                        <Nav className=\"option\" navbar>\n                        <NavItem>\n                          <NavItem>\n                            {\n                              (user) ?  \n                                (<div>\n                                    <div className=\"navbarusername\"> \n                                      {user.userName} \n                                    </div>\n                                    <div className=\"navbarname\"> \n                                      {user.firstName} \n                                    </div>\n                                  </div>\n                                ) : \n                              (null)\n                            }\n                            {\n                              (user) ?  (<div className=\"navbarname\"> {user.firstname} </div>) : (null)\n                            }\n                          </NavItem>\n                          <NavItem>\n                            <Button className=\"navoptions\" outline color=\"darkPurple\" href=\"/home\">Search</Button>\n                          </NavItem>\n                          <NavItem>\n                            <Button className=\"navoptions\" outline color=\"darkPurple\" href=\"/playlist\">Playlists</Button>\n                          </NavItem>\n                          <NavItem>\n                            <LogoutComponent className=\"navoptions\"  sessionToken={this.props.sessionToken} />\n                          </NavItem>  \n                          </NavItem>\n                          {(admin)? <NavItem ><AdminOptions /></NavItem> : null}\n                        </Nav>\n                     </Collapse>\n                </Navbar>\n            </div>\n\n        )\n    }\n\n\n}\nexport default LoggedInBar;","import React, { Component } from 'react';\nimport { BrowserRouter, Route, Redirect, Switch} from 'react-router-dom'\nimport { Fade, Badge} from 'reactstrap'\nimport './Home.css';\nimport { getFromStorage } from '../../utils/local-storage'\nimport LoginBox from '../LoginBox/LoginBox'\nimport SignUpBox from '../SignUpBox/SignUpBox'\nimport SearchScreen from '../SearchScreen/SearchScreen'\nimport HomeBar from '../NavBars/HomeBar'\nimport LoggedInBar from '../NavBars/LoggedInBar'\nimport axios from 'axios'\n\n\nclass Home extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            loading : true,\n            token : '',\n            userId : ''\n        }\n    }\n\n    //methods to handle any callbacks\n\n    handleCallbackSetLoadingToTrue =()=>{\n        this.setState({\n            loading : true\n        })\n    }\n\n    handleCallbackSetLoadingToFalse =()=>{\n        this.setState({\n            loading : false\n        })\n    }\n\n    handleCallbackUpdateToken =(data, id)=> {\n        this.setState({\n            userId : id,\n            token : data\n        })\n    }\n\n    signedIn(){\n        this.setState({\n            loading : false\n        })\n    }\n    // takes the given token and verifies it on the server\n    fetchAndVerifyToken (token, userid){\n        fetch('/api/user/verify?token=' + token)\n        .then(res => res.json())\n        .then(response => {\n            console.log(\"Success: \" + response.success)\n            if (response.success) {\n               \n                this.setState({\n                    userId : response.userId,\n                    token : token,\n                    loading : false\n                })\n            } else {\n                this.setState({\n                    loading : true\n                })\n                return\n            }\n        })\n    }\n\n    /**\n     * check if the user is already logged in \n     * by verifying the token stored in the local \n     * storage.\n     */\n\n    componentDidMount =()=>{\n        const jsonFile = getFromStorage('RaveWave')\n        if (jsonFile !== null){\n            console.log(\"Previous Token is found: \" + jsonFile.token)\n        } else {\n            console.log(\"Staring new login session\")\n        }\n        if (jsonFile && jsonFile.token ) {\n            const token  = jsonFile.token\n            const userid = jsonFile.userid\n            this.fetchAndVerifyToken(token, userid)\n        } else {\n             this.setState({\n                 loading : false\n             })\n        }\n    }\n\n    fetchUserProfile=()=> {\n        const { sessionToken, userId } = this.props;\n        axios.get(\n          \"/api/user/retrieveuser\" + \n          \"?token=\" + sessionToken + \n          \"&userid=\" + userId,\n          )\n          .then((res) => {\n            const response = res.data\n            if (response.success) {      \n              this.setState({\n                userProfile: response.user\n              })\n            } else {\n              console.log(\"ERROR fetching data \");\n            }\n          })\n      }\n\n  render() {\n    const invalidUrl =()=>{\n        return <h2>404 not found </h2>\n    }\n      const {\n        loading,\n        token\n      } = this.state\n\n      /**\n       * check if user is already logged in. \n       * Compare local token with the token in the database\n       * if exists == true, then they are already logged in\n       */\n      if (!token) {\n          return (\n            <div className=\"universal\">\n                <BrowserRouter>\n                    <Switch>           \n                        <Route \n                            path='/' exact \n                            render={() => \n                                <Fade>\n                                    <HomeBar />\n                                        <div className=\"welcomeText\">\n                                            <Fade>\n                                                <h1 className=\"title\">Listen to what you feel</h1> \n                                                <h2 className=\"sub-title\">Sign up today and find songs that match your mood</h2>\n                                                <h1><Badge href=\"/signup\" color=\"purple\" size='xl' className=\"defaultButton\" pill><div className=\"text\">Signup</div></Badge></h1>\n                                            </Fade>    \n                                        </div>  \n                                </Fade>\n                            }\n                        />\n                        \n                        <Route \n                            path='/signup' exact \n                            render={(props) => \n                                <div>\n                                    <HomeBar />\n                                    <SignUpBox {...props} \n                                        triggerSetLoadingToTrue = { \n                                            this.handleCallbackSetLoadingToTrue \n                                        } \n                                        triggerSetLoadingToFalse = { \n                                            this.handleCallbackSetLoadingToFalse \n                                        } \n                                    />\n                                </div>\n                            }\n                        />\n                        <Route\n                            path='/login' exact \n                            render={(props) =>  \n                                <div>\n                                <HomeBar /> \n                                    <LoginBox {...props}\n                                        triggerUpdateToken = { \n                                            this.handleCallbackUpdateToken \n                                        }\n                                        triggerSetLoadingToTrue = { \n                                            this.handleCallbackSetLoadingToTrue \n                                        }\n                                        triggerSetLoadingToFalse = { \n                                            this.handleCallbackSetLoadingToFalse \n                                        }\n                                    />\n                                </div>\n                            }\n                        />\n                        <Route component={invalidUrl}/>\n                    </Switch>\n                </BrowserRouter>  \n            </div>\n          )   \n      }\n      if (loading) {\n        return (\n          <div>\n              <p>Loading ...</p>\n          </div>\n        )\n    }\n\n  // display the components if they are logged in\n    return (\n        <BrowserRouter>\n            <div className=\"default\">\n            <Redirect to=\"/home\" />\n                <LoggedInBar\n                    className=\"NavigationBar\"\n                    sessionToken = { this.state.token }\n                    userId = { this.state.userId } />\n                <SearchScreen\n                    sessionToken = { this.state.token }\n                    userId = { this.state.userId }\n                />  \n                </div>\n         \n        </BrowserRouter>\n    )\n  }\n}\n\nexport default Home;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Home from '../Home/Home'\n\nclass App extends Component {\n  render() {\n    return (\n      <div >\n        <Home className=\"default\" />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App'\nimport * as serviceWorker from './serviceWorker';\nimport './styles/sass/custom.scss'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}